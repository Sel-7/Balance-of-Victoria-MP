types map_list_panel_types {
	### BUILD BUILDINGS
	type build_building_map_list_panel = map_list_panel {
		name = "build_building_map_list_panel"

		blockoverride "headers" {

			sort_button = {
				align = center|nobaseline
				text = "BUILDING_MAP_LIST_PANEL_STATE_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_STATE_HEADER_TOOLTIP"
				#size = { 120 20 }
				size = { 110 20 }
				onclick = "[MapListPanel.Sort('state')]"
			}
			
			#new: state traits
			sort_button = {
				align = center|nobaseline
				tooltip = "The traits of this [concept_state]"
				size = { 90 20 } # +90
				button = {
					texture = "gfx/interface/icons/state_trait_icons/good_soils.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "BUILDING_LEVEL_HEADER_TOOLTIP"
				#size = { 70 20 }
				size = { 60 20 }
				onclick = "[MapListPanel.Sort('size')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_size.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}

			sort_button = {
				align = center|nobaseline
				#text = "BUILDING_MAP_LIST_PANEL_INFRASTRUCTURE_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_INFRASTRUCTURE_HEADER_TOOLTIP"
				#size = { 60 20 }
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('infrastructure_balance')]"
				button = {
					texture = "gfx/interface/icons/state_status_icons/state_infrastructure.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}

			sort_button = {
				align = center|nobaseline
				text = "BUILDING_MAP_LIST_PANEL_AVAILABLE_LABOR_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_AVAILABLE_LABOR_HEADER_TOOLTIP"
				size = { 85 20 }
				onclick = "[MapListPanel.Sort('potential_labor')]"
			}

#			sort_button = {
#				align = center|nobaseline
#				tooltip = "BUILDING_PROFITABILITY_HEADER_TOOLTIP"
#				size = { 70 20 }
#				onclick = "[MapListPanel.Sort('profitability')]"
#				button = {
#					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_profitability.dds"
#					size = { 25 25 }
#					parentanchor = center
#					alwaystransparent = yes
#				}
#				visible = "[Not(ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
#			}

			sort_button = {
				align = center|nobaseline
				text = "concept_tax"
				tooltip = "BUILDING_TAXATION_CAPACITY_HEADER_TOOLTIP"
				size = { 75 20 }
				onclick = "[MapListPanel.Sort('tax_capacity_balance')]"
				visible = "[ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self)]"
			}

			sort_button = {
				align = center|nobaseline
				#text = "BUILDING_MAP_LIST_PANEL_PROFIT_IMPACT_HEADER"
				button = {
					texture = "gfx/interface/icons/topbar/income_power_icon.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
				tooltip = "BUILDING_MAP_LIST_PANEL_PROFIT_IMPACT_TOOLTIP"
				#size = { 80 20 }
				size = { 75 20 }
				onclick = "[MapListPanel.Sort('profit_impact')]"
				visible = "[Not(ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "BUILDING_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						#size = { 120 40 }
						size = { 110 40 }
					}

					blockoverride "name_button_properties" {

						datacontext = "[MapListOption.GetBuildingData.GetState]"

						onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

						datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						enabled = "[Building.IsValid]"
						onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
						
						tooltipwidget = {
							FancyTooltip_Building = {}
						}

						textbox = {
							visible = "[Not(And(State.IsUnincorporated, Not(State.IsIncorporating)))]"
							margin = { 10 0 }
							#size = { 120 25 }
							size = { 110 25 }
							align = left|nobaseline
							text = "[State.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}

						textbox = {
							visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
							margin = { 10 0 }
							#size = { 95 25 }
							size = { 90 25 }
							align = left|nobaseline
							text = "[State.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}

						icon = {
							visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
							parentanchor = right|vcenter
							position = { -5 0 }
							#size = { 25 25 }
							size = { 20 20 }
							texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
						}
					}

					blockoverride "values" {
					
						#new
						widget = {
							size = { 90 40 }
							#margin = { 5 0 }
							#margin = { 5 5 }
							#margin_top = 5
							align = center|nobaseline
							flowcontainer = {
								direction = horizontal
								parentanchor = vcenter
								#margin = { 7 0 }
								datacontext = "[MapListOption.GetBuildingData.GetState.GetStateRegion]"
								datamodel = "[StateRegion.AccessTraits]"
								item = {
									icon = {
										size = { 25 25 }
										tooltipwidget = {
											StateTraitTooltip = {}
										}
										onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
										onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"						
										alwaystransparent = no
										texture = "[StateTrait.GetTexture]"
									}
								}
							}
						}

						textbox = {
							datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
							margin = { 5 0 }
							#size = { 70 25 }
							size = { 60 25 }
							align = right|nobaseline
							text = "[Building.GetExpansionLevelDesc]"
							parentanchor = vcenter
							elide = right
							using = tooltip_above
							alpha = "[TransparentIfFalse( Or( GreaterThan_int32(Building.GetExpansionLevel, '(int32)0'), Building.HasConstructionQueued ))]"
							fontsize_min = 12
						}

						textbox = {
							margin = { 5 0 }
							#margin_right = 10
							margin_right = 7
							#size = { 60 25 }
							size = { 55 25 }
							align = right|nobaseline
							datacontext = "[MapListOption.GetBuildingData.GetState]"
							raw_text = "#v [State.GetInfrastructureBalance|0+=]#!"
							tooltip = "STATE_INFRASTRUCTURE_DESC"
							parentanchor = vcenter
							elide = right
						}

						textbox = {
							datacontext = "[MapListOption.GetBuildingData.GetState]"
							margin = { 5 0 }
							size = { 85 25 }
							align = right|nobaseline
							text = "MAP_LIST_STATE_AVAILABLE_LABOR"
							parentanchor = vcenter
							elide = right
							tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
						}

#						textbox = {
#							margin = { 5 0 }
#							margin_right = 10
#							size = { 70 25 }
#							align = right|nobaseline
#							datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
#							raw_text = "#v @money![Building.GetBuildingType.GetExpansionProductivityImpact(Building.Self, Building.GetState)|1+]#!"
#							tooltip = "[Building.GetBuildingType.GetExpansionProductivityImpactDesc(Building.Self, Building.GetState)]"
#							parentanchor = vcenter
#							elide = right
#							visible = "[Not(ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
#						}

						# Government Administration
						textbox = {
							margin = { 5 0 }
							margin_right = 10
							#size = { 70 25 }
							size = { 75 25 }
							align = right|nobaseline
							datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
							datacontext = "[Building.GetState]"
							raw_text = "[State.CalcTaxCapacityBalance|0+=]"
							tooltip = "STATE_TAX_CAPACITY_DESC"
							parentanchor = vcenter
							elide = right
							visible = "[ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self)]"
						}

						textbox = {
							margin = { 5 0 }
							margin_right = 10
							#size = { 80 25 }
							size = { 75 25 }
							align = right|nobaseline
							datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
							raw_text = "#v [Building.GetBuildingType.GetExpansionRevenueImpact(Building.Self, Building.GetState)|K+=]#!"
							tooltip = "[Building.GetBuildingType.GetExpansionRevenueImpactDesc(Building.Self, Building.GetState)]"
							parentanchor = vcenter
							elide = right
							visible = "[Not(ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
						}
					}
				}
			}
		}
	}
}

types StateTraitTooltip {
	Type StateTraitTooltip = container {

		alwaystransparent = no
		widget {
			spriteType = CorneredTiled
			texture = "gfx/interface/tooltip/tooltip_bg.dds"
			spriteborder = { 48 48 }
			autoresize = yes
			name = background
			using = background
			size = { 100% 100% }
			alwaystransparent = no
			vbox = {
				using = tooltip_properties
				margin = { 10 10 }
				autoresize = yes
				textbox = {
					using = fontsize_large
					default_format = "#tooltip_header"
					align = left
					using = tooltip_font
					text = "[StateTrait.GetName]"
					autoresize = yes
				}

				text_multi = {
					using = tooltip_font
					text = "[StateTrait.GetModifiersDesc]"
					autoresize = yes
					margin = { 5 5 }
				}
			}
		}
	}
}

template tooltip_properties {
	alwaystransparent = no
	using = clickthrough_blocker

	# hidden button to close the tooltip
	button = {
		size = { 0 0 }
		visible = "[PdxGuiWidget.IsTooltipLocked]"
		onclick = "[CloseAllTooltips]"
		shortcut = "close_window"
	}
		
	background = {
		spriteType = CorneredTiled
		spriteborder = { 48 48 }
		texture = "gfx/interface/tooltip/tooltip_bg.dds"
		texture_density = 2
		tintcolor = "[TooltipInfo.GetTintColor]"	
		
		modify_texture = {
			texture = "gfx/interface/backgrounds/default_bg_shading.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
		modify_texture = {
			texture = "gfx/interface/textures/velvet_texture.dds"
			spriteType = Corneredtiled
			texture_density = 2
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
		modify_texture = {
			texture = "gfx/interface/textures/cloth_texture.dds"
			spriteType = Corneredtiled
			texture_density = 2
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0.15
		}
	}
	icon = {
		texture = "gfx/interface/tooltip/tooltip_frame.dds"
		spriteType = Corneredstretched
		spriteborder = { 8 8 }
		size = { 100% 100% }
		texture_density = 2
		tintcolor = "[TooltipInfo.GetTintColor]"
	}
}